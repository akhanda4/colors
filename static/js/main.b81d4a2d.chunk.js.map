{"version":3,"sources":["Css/ColorChanger.module.css","Css/Person.module.css","Components/Person.jsx","Components/ColorChanger.jsx","Error/ErrorBoundary.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Person","props","className","classes","onClick","click","name","age","children","type","onChange","change","value","ColorChanger","colorChanger","Customslider","join","colorType","red","colorCodeValue","changeRed","max","min","orientation","green","changeGreen","blue","changeBlue","ErrorBoundary","state","hasError","errorMessage","componentDidCatch","error","info","setState","this","Component","App","persons","id","showPersons","redColorChange","blueColorChange","greenColorChange","nameChangeHandler","event","personIndex","findIndex","p","person","target","deletePersonHandler","splice","togglePersons","map","index","key","styles","background","style","backgroundColor","color","font","border","padding","cursor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b81d4a2d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorChanger\":\"ColorChanger_colorChanger__b8SGT\",\"Customslider\":\"ColorChanger_Customslider__2IPxl\",\"rangeslider\":\"ColorChanger_rangeslider__z19u2\",\"colorType\":\"ColorChanger_colorType__2Ghtj\",\"red\":\"ColorChanger_red__1oa-G\",\"blue\":\"ColorChanger_blue__1UTgu\",\"green\":\"ColorChanger_green__1Sxh2\",\"colorCodeValue\":\"ColorChanger_colorCodeValue__1cf9E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__3e2D5\"};","import React from \"react\";\r\nimport classes from \"../Css/Person.module.css\";\r\nconst Person = props => {\r\n  return (\r\n    <div className={classes.Person}>\r\n      <p onClick={props.click}>\r\n        My name is {props.name} and i am {props.age} years old\r\n      </p>\r\n      <p>{props.children}</p>\r\n      <input type={\"text\"} onChange={props.change} value={props.name} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Person;\r\n","import React from \"react\";\r\nimport classes from \"../Css/ColorChanger.module.css\";\r\nimport Slider from \"react-rangeslider\";\r\nconst ColorChanger = props => {\r\n  return (\r\n    <div className={classes.colorChanger}>\r\n      <div className={[classes.Customslider, \"slider\"].join(\" \")}>\r\n        {/*\"slider\"*/}{\" \"}\r\n        {/*classNames({[styles.foo]: true, [styles.bar]: true}) */}\r\n        <span className={[classes.colorType, classes.red].join(\" \")}>\r\n          Red\r\n        </span>{\" \"}\r\n        {/*\"colorType red\"*/}\r\n        <p className={classes.colorCodeValue}>{props.red}</p>{\" \"}\r\n        {/*\"colorCodeValue\"*/}\r\n        <Slider\r\n          onChange={props.changeRed}\r\n          value={props.red}\r\n          max={254}\r\n          min={0}\r\n          orientation=\"vertical\"\r\n        />\r\n      </div>\r\n      <div className={classes.Customslider}>\r\n        {/* \"colorCodeValue\"*/}\r\n        <span className={[classes.colorType, classes.green].join(\" \")}>\r\n          Green\r\n        </span>\r\n        {/*\"colorType green\"*/}\r\n        <p className={classes.colorCodeValue}>{props.green}</p>\r\n        {/*\"colorCodeValue\"*/}\r\n        <Slider\r\n          onChange={props.changeGreen}\r\n          max={254}\r\n          min={0}\r\n          value={props.green}\r\n          orientation=\"vertical\"\r\n        />\r\n      </div>\r\n      <div className={classes.Customslider}>\r\n        {/*\"slider\"*/}\r\n        <span className={[classes.colorType, classes.blue].join(\" \")}>\r\n          Blue\r\n        </span>{\" \"}\r\n        {/*\"colorType blue\"*/}\r\n        <p className={classes.colorCodeValue}>{props.blue}</p>{\" \"}\r\n        {/*\"colorCodeValue\"*/}\r\n        <Slider\r\n          onChange={props.changeBlue}\r\n          max={254}\r\n          min={0}\r\n          value={props.blue}\r\n          orientation=\"vertical\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorChanger;\r\n","import React, { Component } from \"react\";\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    hasError: false,\r\n    errorMessage: \"\"\r\n  };\r\n  componentDidCatch = (error, info) => {\r\n    this.setState({ hasError: true, errorMessage: error });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Something went wrong</h1>;\r\n    } else {\r\n      return this.props.children;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Person from \"./Components/Person\";\nimport ColorChanger from \"./Components/ColorChanger\"; //it is used to add pseudo selecter with inline styles like :hover,:active\nimport \"react-rangeslider/lib/index.css\";\nimport ErrorBoundary from \"./Error/ErrorBoundary\";\nclass App extends Component {\n  state = {\n    persons: [\n      { id: \"asdf1\", name: \"Aman\", age: 20 },\n      { id: \"asdf2\", name: \"Akshay\", age: 25 },\n      { id: \"asdf3\", name: \"Rajan\", age: 26 }\n    ],\n    showPersons: false,\n    red: 254,\n    green: 244,\n    blue: 154\n  };\n  redColorChange = value => {\n    this.setState({\n      red: value\n    });\n  };\n  blueColorChange = value => {\n    this.setState({\n      blue: value\n    });\n  };\n  greenColorChange = value => {\n    this.setState({\n      green: value\n    });\n  };\n\n  nameChangeHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n    const person = { ...this.state.persons[personIndex] };\n    person.name = event.target.value;\n    const persons = [...this.state.persons];\n    persons[personIndex] = person;\n    this.setState({ persons: persons });\n  };\n\n  deletePersonHandler = personIndex => {\n    const persons = [...this.state.persons];\n    persons.splice(personIndex, 1);\n    this.setState({ persons: persons });\n  };\n\n  togglePersons = () => {\n    const showPersons = this.state.showPersons;\n    this.setState({\n      showPersons: !showPersons\n    });\n  };\n\n  render() {\n    let persons = null;\n    const { red } = this.state;\n    const { green } = this.state;\n    const { blue } = this.state;\n\n    if (this.state.showPersons === true) {\n      persons = (\n        <div>\n          {this.state.persons.map((person, index) => {\n            return (\n              <ErrorBoundary key={person.id}>\n                <Person\n                  name={person.name}\n                  age={person.age}\n                  value={person.name}\n                  change={event => this.nameChangeHandler(event, person.id)}\n                  click={() => this.deletePersonHandler(index)}\n                />\n              </ErrorBoundary>\n            );\n          })}\n        </div>\n      );\n    }\n    const styles = {\n      background:\n        \"rgb(\" +\n        this.state.red +\n        \",\" +\n        this.state.green +\n        \",\" +\n        this.state.blue +\n        \")\"\n    };\n    const styles1 = {\n      backgroundColor: \"green\",\n      color: \"white\",\n      font: \"inherit\",\n      border: \"1px solid blue\",\n      padding: \"8px\",\n      cursor: \"pointer\"\n    };\n    return (\n      <div style={styles} className={\"App\"}>\n        <ColorChanger\n          changeRed={this.redColorChange}\n          changeBlue={this.blueColorChange}\n          changeGreen={this.greenColorChange}\n          red={red}\n          green={green}\n          blue={blue}\n        />\n        <div>\n          <h1>Hi there this is react.</h1>\n          <p>This is really working.</p>\n          <button style={styles1} onClick={this.togglePersons}>\n            Toggle Persons\n          </button>\n          {persons}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/*\nUsing Stateful components\n\n\nclass App extends Component {\n  state = {\n    persons: [\n      { id: \"asdf1\", name: \"Max\", age: 20 },\n      { id: \"asdf2\", name: \"Manu\", age: 25 },\n      { id: \"asdf3\", name: \"Stephanie\", age: 35 }\n    ],\n    otherState: \"some other value\",\n    showPersons: false\n  };\n\n  nameChangedHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n    persons[personIndex] = person;\n\n    this.setState({\n      persons: persons\n    });\n  };\n\n  togglePersonsHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({\n      showPersons: !doesShow\n    });\n  };\n\n  deletePersonHandler = personIndex => {\n    // either this or the one that is is next line: const persons = this.state.persons;\n    //but we shouldn't use like const persons = this.state.person;\n    //                                           why?? because here\n    //                                          instead of copying an array we are actually\n    //                                          referencing to the original array which is\n    //                                          a bad choice. so instead of copying an array\n    //                                          it's better if we use a copy of original array\n    //                                          then manipulate the copy instead of array\n    const persons = [...this.state.persons];\n    persons.splice(personIndex, 1);\n    this.setState({\n      persons: persons\n    });\n  };\n  render() {\n    const style = {\n      backgroundColor: \"white\",\n      font: \"inherit\",\n      border: \"1px solid blue\",\n      padding: \"8px\",\n      cursor: \"pointer\"\n    };\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = (\n        <div>\n          {this.state.persons.map((person, index) => {\n            return (\n              <Person\n                name={person.name}\n                age={person.age}\n                click={() => this.deletePersonHandler(index)}\n                key={person.id}\n                changed={event => this.nameChangedHandler(event, person.id)}\n              />\n            );\n          })}\n        </div>\n      );\n    }\n\n    return (\n      <div className={classes.App}>\n        <h1>Hi i am a react App</h1>\n        <p>Wow this is really working</p>\n        <button style={style} onClick={this.togglePersonsHandler}>\n          Toggle Persons\n        </button>\n        {persons}\n      </div>\n    );\n  }\n}\n\nexport default App;\n*/\n//import Person from \"./Components/Person\";\n/*\nimport UserInput from \"./Component2/UserInput/UserInput\";\nimport UserOutput from \"./Component2/UserOutput/UserOutput\";\nclass App extends Component {\n  state = {\n    username: \"supermax\"\n  };\n\n  userNameChangedHandler = event => {\n    this.setState({\n      username: event.target.value\n    });\n  };\n  render() {\n    return (\n      <div>\n        <UserInput\n          changed={this.userNameChangedHandler}\n          currentName={this.state.username}\n        />\n        <UserOutput userName={this.state.username} />\n        <UserOutput userName={this.state.username} />\n        <UserOutput userName={\"Max\"} />\n      </div>\n    );\n  }\n}\nexport default App;\n*/\n\n/*\nThis complete commented code is made with hooks also known as smart components\nconst App = () => {\n  const [personsState, setPersonsState] = useState({\n    persons: [\n      { name: \"Aman\", age: 20 },\n      { name: \"Akshay\", age: 25 },\n      { name: \"Abhey\", age: 22 },\n      { name: \"Abhinav\", age: 23 }\n    ],\n  });\n  const [otherState, setOtherState] = useState(\"This is other state\");\n  console.log(personsState, otherState);\n  const switchNameHandler = () => {\n    //Don't do this -> this.state.persons[0].name = \"Max\";\n    setPersonsState({\n      persons: [\n        { name: \"Max\", age: 20 },\n        { name: \"Akshay\", age: 25 },\n        { name: \"Arnav\", age: 35 }\n      ],\n    });\n  };\n  return (\n    <div className=\"App\">\n      <h1>Hi i am a react App</h1>\n      <p>Wow this is really working</p>\n      <button onClick={switchNameHandler}>Switch name</button>\n      <Person\n        name={personsState.persons[0].name}\n        age={personsState.persons[0].age}\n      />\n      <Person\n        name={personsState.persons[1].name}\n        age={personsState.persons[1].age}\n      />\n      <Person\n        name={personsState.persons[2].name}\n        age={personsState.persons[2].age}\n      />\n    </div>\n  );\n};\n\nexport default App;\n*/\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}